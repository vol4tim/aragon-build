import ReactPropTypesSecret_1 from"./lib/ReactPropTypesSecret.js";var printWarning=function(){};if("production"!==process.env.NODE_ENV){var ReactPropTypesSecret=ReactPropTypesSecret_1,loggedTypeFailures={},has=Function.call.bind(Object.prototype.hasOwnProperty);printWarning=function(e){var r="Warning: "+e;"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}}function checkPropTypes(e,r,t,o,n){if("production"!==process.env.NODE_ENV)for(var a in e)if(has(e,a)){var c;try{if("function"!=typeof e[a]){var p=Error((o||"React class")+": "+t+" type `"+a+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[a]+"`.");throw p.name="Invariant Violation",p}c=e[a](r,a,o,t,null,ReactPropTypesSecret)}catch(e){c=e}if(!c||c instanceof Error||printWarning((o||"React class")+": type specification of "+t+" `"+a+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof c+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),c instanceof Error&&!(c.message in loggedTypeFailures)){loggedTypeFailures[c.message]=!0;var i=n?n():"";printWarning("Failed "+t+" type: "+c.message+(null!=i?i:""))}}}checkPropTypes.resetWarningCache=function(){"production"!==process.env.NODE_ENV&&(loggedTypeFailures={})};var checkPropTypes_1=checkPropTypes;export default checkPropTypes_1;export{checkPropTypes_1 as __moduleExports};