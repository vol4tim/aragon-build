import toConsumableArray from"../../node_modules/@babel/runtime/helpers/toConsumableArray.js";import slicedToArray from"../../node_modules/@babel/runtime/helpers/slicedToArray.js";import JSBI from"../../node_modules/jsbi/dist/jsbi.mjs.js";import{NO_BREAK_SPACE}from"./characters.js";import{divideRoundBigInt}from"./math.js";function formatIntegerRange(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:99,e=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return(n=parseInt(n,10))<=t?"".concat(parseInt(t,10)):n>r?"".concat(parseInt(r,10)).concat(e):String(n)}function formatNumber(n){var t=String(n).split("."),r=slicedToArray(t,2),e=r[0],o=r[1];return toConsumableArray(e).reverse().reduce((function(n,t,r){return t+(r>0&&r%3==0?",":"")+n}),o?".".concat(o):"")}function formatTokenAmount(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},e=r.digits,o=void 0===e?2:e,i=r.symbol,a=void 0===i?"":i,s=r.displaySign,m=void 0!==s&&s;n=JSBI.BigInt(String(n)),t=JSBI.BigInt(String(t)),o=JSBI.BigInt(String(o));var d=JSBI.BigInt(0),I=JSBI.BigInt(10);if(JSBI.lessThan(t,d))throw new Error("formatTokenAmount(): decimals cannot be negative");if(JSBI.lessThan(o,d))throw new Error("formatTokenAmount(): digits cannot be negative");JSBI.lessThan(t,o)&&(o=t);var u=JSBI.lessThan(n,d);u&&(n=JSBI.unaryMinus(n));var c=JSBI.equal(t,d)?n:JSBI.BigInt(divideRoundBigInt(n,JSBI.exponentiate(I,JSBI.subtract(t,o)))),B=formatNumber(JSBI.divide(c,JSBI.exponentiate(I,o))),S=String(JSBI.remainder(c,JSBI.exponentiate(I,o))).padStart(o,"0").replace(/0+$/,"");return[m?u?"-":"+":"",B,S?".".concat(S):"",a?"".concat(NO_BREAK_SPACE).concat(a):""].join("")}export{formatIntegerRange,formatNumber,formatTokenAmount};